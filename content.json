{"meta":{"title":"owuiviuwo's blog!","subtitle":":)","description":"Welcome to My site!","author":"owuiviuwo","url":""},"pages":[{"title":"about","date":"2022-12-12T14:14:36.000Z","updated":"2023-01-19T16:43:15.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"owuiviuwo 与&nbsp; owuiviuwo&nbsp; 对话中... bot_ui_ini()","keywords":"关于"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2023-02-11T12:17:10.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"分类","date":"2022-12-12T14:14:36.000Z","updated":"2023-01-22T16:08:10.000Z","comments":false,"path":"postcategory/index.html","permalink":"/postcategory/index.html","excerpt":"","text":"","keywords":"分类"},{"title":"标签","date":"2022-12-12T14:14:36.000Z","updated":"2023-01-23T14:57:00.000Z","comments":false,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":"","keywords":"标签"},{"title":"统计","date":"2022-12-12T14:14:36.000Z","updated":"2023-01-24T14:52:05.000Z","comments":false,"path":"statistics/index.html","permalink":"/statistics/index.html","excerpt":"","text":"","keywords":"统计"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"说说","date":"2022-12-12T14:14:36.000Z","updated":"2023-01-19T18:36:29.000Z","comments":false,"path":"shuoshuo/index.html","permalink":"/shuoshuo/index.html","excerpt":"","text":"new Artitalk({ appId: \"Bca3aRLRAJx2I6PNPDTapKBT-MdYXbMMI\", appKey: \"o1JOvsCvLL7SkH0kH1SeRXKK\", color1: '#E6E6FA', color2: '#F0FFFF', color3: 'black', atComment:1, })","keywords":"说说"}],"posts":[{"title":"2022秋学期-高级操作系统期末整理","slug":"2022秋学期-高级操作系统期末整理","date":"2023-02-25T08:07:33.000Z","updated":"2023-02-25T08:07:33.591Z","comments":true,"path":"2023/02/25/2022秋学期-高级操作系统期末整理/","link":"","permalink":"/2023/02/25/2022秋学期-高级操作系统期末整理/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"2022秋学期 高级操作系统课件后习题","slug":"2022秋学期-高级操作系统课件后习题","date":"2023-02-12T09:34:47.000Z","updated":"2023-02-12T11:06:30.000Z","comments":true,"path":"2023/02/12/2022秋学期-高级操作系统课件后习题/","link":"","permalink":"/2023/02/12/2022秋学期-高级操作系统课件后习题/","excerpt":"","text":"2022秋学期 高级操作系统课件后习题C0 引言本文内容来自于对高级操作系统课程PPT后习题的整理与解答，部分章节课件后没有习题，且答案不一定完全准确，敬请批评指正； 本文所涉及的课程指东北某沿海高校，计算机学院硕士生必修课“高级操作系统”，课程资料包括课程PPT、教材《分布式系统原理与范型 第二版》1、《Distributed Systems Principles and Paradigms 2nd edition》2，以及网络资料。 1. 《分布式系统原理与范型 第二版》 作者: （美）特尼博姆 出版社: 清华大学出版社 原作名: Distributed Systems: Principles and Paradigms 译者: 辛春生 :出版年: 2008-6-1 页数: 490 ISBN: 978730217279 &#8617; 2. 《Distributed Systems Principles and Paradigms 2nd edition》:作者: Tanenbaum, Andrew S. / Steen, Maarten van 出版社: Pearson 出版年: 2001-9-1 页数: 803 ISBN: 9780131217867 &#8617; C2 体系结构 (C2Q4)考虑一个进程链，该进程（链）由进程$P_1,P_2,\\dots P_n$构成，实现了一个多层客户-服务器体系结构。进程$P_i$是$P_{i+1}$的客户，只有$P_i$得到$P_{i+1}$的应答之后，才能向$P_{i-1}$发出应答。如果考虑到进程$P_{1}$的请求-应答性能，这种组织结构主要存在什么问题？ 答：当n很大时性能可能会很差。两个连续层的通信可能会在不同的机器上，这样P1和P2的交互性能就取决于其他 n-2 层之间的交互性能。且，若进程链中的某台机器性能较差或者暂时无法联系，进程链的性能将显著下降。 C3 分布式进程管理 （C3Q1）比较在单处理器系统中，使用单线程文件服务器和使用多线程文件服务器读取文件有什么区别。假定需要的数据存放在内存的缓存中（概率为2/3），将花费30ms来接收请求、调度该请求并且完成其他必须的处理工作。否则需要磁盘操作，就需要额外多花90ms，在磁盘操作的过程中线程处于等待状态。 如果服务器采用单线程，每秒能处理多少个请求？ 如果服务器采用多线程呢？ 答： 对于单线程： t=30*2/3+(30+90)*1/3=60msn=1s/t=50/3个也就是每秒50/3个 对于多线程：磁盘操作涉及的等待状态可以交给其他线程，因此每个请求所需的时间就是接收请求与调度的30ms t=30msn=1s/t=100/3个也就是每秒100/3个 （C3Q2）对服务器进程中的线程数目进行限制是否有意义？ 答：显然有，主要有两个原因： 线程需要内存空间来设置私有堆栈，过多的线程可能会占据过多的内存使服务器无法正常工作 对于操作系统来说，独立的线程往往以混乱的方式运行。在虚拟内存系统中构造一个相对稳定的工作集时很困难的，导致了许多页错误以及相应的I/O操作。过多的线程可能因为页错误而使得性能下降。甚至在那些内存正常的情况下，我们可能很容易看到内存的访问是按照混乱的模式进行的，从而导致缓存毫无用处。这可能会导致性能甚至不如单线程。 （C3Q10）列举通过生成进程来构建并发服务器与使用多线程服务器的优点和缺点。 答：一个重要的有点是独立的进程时相互保护的，这是很有必要的，例如在超级服务器上处理独立的服务。另一方面，进程的产生是的代价是相对较高的，这些代价在多线程服务器中可以被节省。此外，如果进程间需要通信，使用线程的代价相对低得多，因为在许多情况下我们可以避免使用内核通信。 C5 命名系统 （C5Q12）假设某个移动实体几乎不会离开域D，即使离开也很快返回。如何利用该信息在分层定位服务中加快查询操作的速度？ 答：只需要在实体的标识符中对域D进行编码，该标识符被用于查询查询实体的操作。这样查询操作就可以立即被转发到目录节点dir（D）中，并从这里开始继续搜索。 （C5Q14）假设一个实体从位置A转移到位置B，期间经过了几个中间位置（停留时间都很短），最终到达B。在分层定位服务中更改地址可能花费较长时间，因此在经过中间位置时，应避免更改地址没那么经过中间位置时应该如何查找该实体？ 答：将分层定位于与转发指针相结合。当实体开始移动时，在A出留下一个转发指针指向其下一个（中转）位置。每次移动时，都在移动开始处留下一个转发指针。直到到达B，将实体的新位置插入到分层定位服务中。转发指针链随后被清理，而A的原位置被删除。 （C5Q13）在深度为k的分层定位服务中，当移动实体改变它的位置时，最少需要更新多少条位置记录？最多需要多少条位置记录？ 答：改变位置可以被描述为一次插入与一次删除操作的结合。一次插入操作最多要求改变k+1条记录。同样的，一次删除操作最多要求修改k+1条记录。而根节点的记录修改可以被两个操作所共享，也就是仅需要修改一次根节点的记录。因此最多需要修改2k+1条记录。 显然，修改记录最少时，要求k=1，此时，最少需要修改3条记录。 C6 同步 （C6Q11）分布式互斥算法中，建议所有的请求都被应答（同意或否定），这样可以检测出崩溃的进程，但是否还有其它问题？ 答：假定某进程P拒绝了请求随后崩溃了。这样请求进程认为P仍然运行，但授权永远不会到来。一个解决办法是让请求进程不阻塞，而是在休眠一个固定时间后，轮询所有之前拒绝过的进程，看它们是否仍在运行。 （C6Q8）许多分布式算法需要协调者，与集中式协调者相比，分布性体现在哪里？ 答：在集中式算法中，通常由一个固定的进程作为协调者。分布式的情况下，不同的进程在不同的机器上运行。在分布式算法中，有不固定的协调者。协调者是由构成算法的一部分进程举（分布式的方式）产生的。这样的协调者并没有让算法的分布程度降低。 C7 一致性和复制 （C7Q20）一个文件被复制在10个服务器上，列出基于法定数目的协议允许的所有读团体和写团体。 答：允许的读团体和写团体有（读团体，写团体）：（1，10），（2，9），（3，8），（4，7），（5，6），（6，5），（7，4），（8，3），（9，2），（10，1）。 C8 容错性 （C8Q7）下面情况下，最少一次语义合适还是最多一次语义合适？ 从文件服务器读写文件 编译一个程序 远程银行 答：对于从文件读写文件、编译一个程序来说，可以使用最少一次语义，因为多次并没有问题。对于远程银行来说，使用最多一次语义，因为如果失败，用户必须干预并清理上一次的残留。 （C8Q14）下图中，FIFO和全序结合情况下。可能的消息发送顺序？ 答：可能的发送顺序有： m1, m2, m3, m4 m1, m3, m2, m4 m1, m3, m4, m2 m3, m1, m4, m2 m3, m4, m1, m2 m3, m1, m2, m4 C9 分布式安全 (C9Q10) Assume Alice wants to send a message m to Bob. Instead of encrypting m with Bob’s public key $K_B^+$, she generates a session key $K_{a,b}$ and then sends $[K_{A,B}(m),K^+_B(K_{A,B})]$.Why is this scheme generally better? (Hint: consider performance issues.) 答：因为会话密钥（session key），具有短且固定的长度，而消息m的长度是任意的。这样的特性导致组合使用会话密钥与公钥加密短消息能够得到更好的性能，而只使用公钥对长信息加密的性能相对较差。 (C9Q19) The Diffie-Hellman key-exchange protocol can also be used to establish a shared secret key between three parties. Explain how. 答：假定Alice、Bob、Chunk想要基于两个公开的大素数$n$和$g$建立共享密钥。Alice拥有一个不公开的大数$x$，Bob拥有不公开的大数$y$，Chunk拥有不公开的大数$z$。Alice将$g^x \\mod n$发送给Bob；Bob将$g^y\\mod n$发送给Chunk；Chunk将$g^z\\mod n$发送给Alice。接下来，Alice计算$g^{xz}\\mod n$，并将计算的结果发送给Bob；这样，Bob可以计算$g^{xyz}\\mod n$；同时，在Bob接收到Alice发送的$g^x \\mod n$后，可以计算$g^{xy}\\mod n$，并将计算的结果发送给Chunk；这样，Chunk可以计算$g^{xyz}\\mod n$；同时，在Chunk接收到Bob发送的$g^y \\mod n$后，可以计算$g^{yz}\\mod n$，并将计算的结果发送给Alice；这样，Alice也可以计算$g^{xyz} \\mod n$。通过上述操作就建立了一个三方之间的共享密钥。 (C9Q20) There is no authentication in the Diffie-Hellman key-exchange protocol. By exploiting this property, a malicious third party, Chunk, can easily break into the key exchange taking place between Alice and Bob, and subsequently ruin the security. Explain how this would work. 答：假定Alice和Bob使用公开的n和g，当Alice发送$g^x\\mod n$给Bob时，Chunk只需拦截该信息，返回其自己的信息$g^z\\mod n$给Alice，这样可以让Alice相信她正在与Bob交谈。类似的，在Chunk拦截Alice的信息后，他可以发送$g^z\\mod n$给Bob，并等待Bob返回$g^y\\mod n$作为应答。Chunk现在作为中间人了","categories":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}],"tags":[{"name":"课程","slug":"课程","permalink":"/tags/课程/"},{"name":"高级操作系统","slug":"高级操作系统","permalink":"/tags/高级操作系统/"},{"name":"分布式","slug":"分布式","permalink":"/tags/分布式/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"/categories/学习/"}]},{"title":"基于hexo的github博客搭建","slug":"基于hexo的github博客搭建","date":"2023-02-09T07:06:00.000Z","updated":"2023-02-09T08:19:51.000Z","comments":true,"path":"2023/02/09/基于hexo的github博客搭建/","link":"","permalink":"/2023/02/09/基于hexo的github博客搭建/","excerpt":"","text":"前言本文写作时间跨度较大，可能出现部分内容不准确以及部分章节风格不一致的情况。 博客的前期搭建主要参考： 2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io) 博客的美化修改主要参考： Uncle_drew (cndrew.cn) 本博客使用的主题是 sakura 还推荐使用主题 GitHub - blinkfox/hexo-theme-matery: A beautiful hexo blog theme with material design and responsive design.一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。国内访问：http://blinkfox.com 前期准备首先，需要有GitHub账号，可使用邮箱注册；满足条件提交材料还可以领取学生礼包。 还需要安装一些环境，可参考网上其他教程安装，例如参考中给出的链接 安装 node.js、安装 git、安装 hexo参考2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io) 1.1 注意事项 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行 hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导 hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的 1.2 下载并安装node.js 官网下载：https://nodejs.org/en/ 安装与使用：见node笔记 安装后验证：node -v 1.3 下载并安装git 官网下载: https://git-scm.com/download/win 安装与使用：见git笔记 安装后验证：git -v 1.4 命令行安装cnpm 命令：npm install -g cnpm –registry==https://registry.npm.taobao.org 安装后验证：cnpm -v 1.5 命令行安装hexo 命令：cnpm install -g hexo-cli 安装后验证：hexo -v 配置github的博客仓库参考2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io) 2.配置github2.1 在github上创建仓库创建： 新建一个名为你的用户名.github.io的仓库 比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 注意： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久； 创建页面如下： 创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 2.2 绑定域名（这步可省略）当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me 如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me 如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me 另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 SSH连接参考2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io) 3. 配置SSH免密登录为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 操作步骤： 第一步：首先打开电脑文件夹，找到C:\\Users\\你的用户名.ssh文件夹并删除 第二步：在C:\\Users\\你的用户名 文件夹下右键打开Git Bash Here输入命令：ssh-keygen -t rsa -C github邮件地址 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功 第三步：最终生成了一个新的 C:\\Users\\你的用户名.ssh文件夹，打开这个文件夹，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容 第四步：打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title随便填，保存即可，我们的公钥就添加成功了，设置好如下图。 第五步：检测是否设置成功： 输入命令： $ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 第六步：此时你还需要配置： $ git config –global user.name “liuxianan”// 你的github用户名，非昵称 $ git config –global user.email “xxx@qq.com“// 填写你的github注册邮箱 具体这个配置是干嘛的我没仔细深究。 本地hexo初始化与部署参考2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io) 4.使用 hexo 搭建博客4.1 初始化第一步：在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是E:\\xpzsData\\hexocode，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放 第二步：在E:\\xpzsData\\hexocode文件夹下右键打开 Git Bash Here，输入hexo init 初始化 hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 第三步：执行以下命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： 第四步：hexo s 是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章https://www.runoob.com/w3cnote/windows-finds-port-usage.html 到这里初始化就完成了 4.2 将博客部署到 github 个人主页上第一步：在E:\\xpzsData\\hexocode目录下安装 hexo-deployer-git 插件 安装命令： npm install hexo-deployer-git –save 必须安装，否则执行hexo d 的话会报如下错误： 第二步：编辑E:\\xpzsData\\hexocode目录下的 _config.yml 文件, 在文件末尾添加如下内容： 注意：其中 repo 中的内容即为 github 个人主页链接地址，具体看下图： 第三步：在E:\\xpzsData\\hexocode目录下, 输入命令：hexo d 将本地 blog 推送到 github仓库, 也可能需要输入 username &amp; pwd。 推送成功后, 在浏览器中输入对应域名, 即可访问 https://reclusew.github.io/ 更换博客主题由于自带的主题确实是一言难尽，因此更换主题是很有必要的。 hexo提供的主题站为： https://hexo.io/themes/ 可以在主题站上下载主题，把选定主题git clone至hexo文件夹下的themes中再修改相关配置文件；或是直接参考选定主题的文档配置； 每次修改需要重新生成，部署 这里选择的主题是：sakura 该主题的文档为 (首页 - Hexo-Sakura (hojun.cn)) 首先，如下图所示，下载该主题压缩包，将压缩包的子目录下的内容提取至hexo根目录，替代冲突项，安装依赖包 需要解压替换的内容 替换后参考主题的文档，修改配置文件即可 写博客与发布# 在博客的根目录 hexo new &quot;newbolg&quot; # 新的博客 hexo new page &quot;newpage&quot; # 新的网站页面 # hexo 生成 hexo g # hexo 本地预览 hexo s # hexo 部署 hexo d 可能涉及的命令# npm 安装 npm i [可填包名] # npm 安装 换源 npm i [可填包名] --registry https://registry.npm.taobao.org # hexo 生成 hexo g # hexo 本地预览 hexo s # hexo 部署 hexo d # 清理本地public等目录的文件 hexo clean 其他的问题hexo及其相关组件版本问题在需要更新的时候一定要慎重，一定记录更新了那些内容！有时候使用旧版本hexo可以避免很多问题！特别是这里使用的Sakura主题，已经有一定的历史了，更新后可能会出现莫名其妙的bug # 安装 npm install 包 # 卸载 npm uninstall 包 hexo init、获取主题时 网络卡住这个问题比较玄学，笔者在这里卡了很久。可能的原因是连接github网络不稳定 可以换一个连接性好一点的网，或者多试几次，总会成功的… 或者参考以下解决方案思路，由于没有试过不知道效果如何 彻底解决 hexo init 卡顿问题 - 简书 (jianshu.com) 图片相关问题如果使用markdown写博客，且把图片保存在本地，上传时可能会出现问题，因为markdown文件的图片是依据路径寻找的而不是再文件中的，因此可以使用图床，这样在上传后路径就不会被影响了 免费的图床还是有一些的，但空间不会特别大，一般也够用了， 例如 Image Upload - SM.MS - Simple Free Image Hosting 或者参考使用github搭建的jsdilvr，也是免费好用的，具体过程可参考： 使用jsDelivr+github搭建免费的cdn | 流年，谁给过的倾城 | Yremp 免费 CDN：jsDelivr + Github - BOB’S BLOG (itbob.cn) Github + jsDelivr + PicGo 打造稳定快速、高效免费图床 - BOB’S BLOG (itbob.cn) Sakura主题notice改成随机格言可参考「Sakura主题美化与修改#01」Hexo-Sakura主题首页的美化和修改 的第四点 进入从博客更目录出发的themes/Sakura/layout/index.ejs，查找&lt;%= theme.notice%&gt;，将其替换为以下内容： 若觉得格言内容单一，可参照语句接口 | 一言开发者中心的内容修改下述代码第六行的链接，例如全都要的话，可以写成这样https://v1.hitokoto.cn/?c=a&amp;c=b&amp;c=c&amp;c=d&amp;c=e&amp;c=f&amp;c=g&amp;c=h&amp;c=i&amp;c=j&amp;c=k&amp;c=l &lt;span id=&quot;hitokoto&quot; style=&quot;margin-left:5px;&quot;&gt; :D 获取中...&lt;/span&gt; &lt;p align=&quot;right&quot; id=&quot;afrom&quot;&gt;&lt;/p&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; fetch(&#39;https://v1.hitokoto.cn/?c=h&#39;) .then(function (res){ return res.json(); }) .then(function (data) { var hitokoto = document.getElementById(&#39;hitokoto&#39;); var afrom = document.getElementById(&#39;afrom&#39;); hitokoto.innerText = data.hitokoto; afrom.innerText = &#39;——【&#39; + data.from + &#39; &#39; + data.from_who + &#39;】&#39;; }) .catch(function (err) { console.error(err); }) &lt;/script&gt; 附上接口的参数含义 请求地址 # 地址 协议 方法 QPS 限制 线路 v1.hitokoto.cn HTTPS Any 3.5 全球 international.v1.hitokoto.cn HTTPS Any 10 国外 请注意：一言域名已加入 HSTS 预加载计划，所有请求一律以 HTTPS 方法进行。 请求参数 # 参数 值 可选 说明 c 见后表 是 句子类型 encode 见后表 是 返回编码 charset 见后表 是 字符集 callback 如：moe 是 调用的异步函数 select 默认：.hitokoto 是 选择器。配合 encode=js 使用 min_length 默认：0 是 返回句子的最小长度（包含） max_length 默认：30 是 返回句子的最大长度（包含） 句子类型（参数） # 参数 说明 a 动画 b 漫画 c 游戏 d 文学 e 原创 f 来自网络 g 其他 h 影视 i 诗词 j 网易云 k 哲学 l 抖机灵 其他 作为 动画 类型处理 可选择多个分类，例如： ?c=a&amp;c=c 返回编码（参数） # 参数 说明 text 返回纯洁文本 json 返回格式化后的 JSON 文本 js 返回指定选择器的同步调用函数。默认选择器为：.hitokoto 其他 返回格式化后的 JSON 文本 字符集（参数） # 参数 说明 utf-8 返回 utf-8 编码的内容 gbk 返回 gbk 编码的内容。不支持与异步函数同用 其他 返回 utf-8 编码的内容 返回格式 # 返回参数名称 描述 id 一言标识 hitokoto 一言正文。编码方式 unicode。使用 utf-8。 type 类型。请参考第三节参数的表格 from 一言的出处 from_who 一言的作者 creator 添加者 creator_uid 添加者用户标识 reviewer 审核员标识 uuid 一言唯一标识；可以链接到 https://hitokoto.cn?uuid=[uuid] 查看这个一言的完整信息 commit_from 提交方式 created_at 添加时间 length 句子长度 Sakura主题恢复原有的主题切换按键可参考「Sakura主题美化与修改#01」Hexo-Sakura主题首页的美化和修改的最后一点， 该部分的前端展示在Hexo版本的Sakura主题被作者中删除了，但其js和css代码并未删除。若要恢复切换主题背景的功能，需在从博客根目录出发的themes/Sakura/layout/layout.ejs中的标签前添加以下内容： &lt;!-- 实现换肤功能 --&gt; &lt;%- partial(&#39;_partial/skin-list&#39;) %&gt; &lt;%- partial(&#39;_partial/skin-btn&#39;, null, {cache: !config.relative_link}) %&gt; &lt;%- partial(&#39;_partial/mheader&#39;, null, {cache: !config.relative_link}) %&gt; &lt;%- partial(&#39;_partial/aplayer&#39;, null, {cache: !config.relative_link}) %&gt; &lt;/body&gt; &lt;/html&gt; 随后在themes/Sakura/layout/_partial文件夹下依次新建skin-btn.ejs和skin-list.ejs， skin-btn.ejs的内容为： &lt;div class=&quot;changeSkin-gear no-select&quot;&gt; &lt;div class=&quot;keys&quot; id=&quot;setbtn&quot;&gt; &lt;span id=&quot;open-skinMenu&quot;&gt; 切换主题 | SCHEME TOOL &lt;i class=&quot;iconfont icon-gear inline-block rotating&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; skin-list.ejs的内容为： &lt;div class=&quot;skin-menu no-select&quot; id=&quot;mainskin&quot; style=&quot;position: fixed&quot;&gt; &lt;div class=&quot;theme-controls row-container&quot;&gt; &lt;ul class=&quot;menu-list&quot;&gt; &lt;li id=&quot;white-bg&quot;&gt; &lt;i class=&quot;fa fa-television&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;sakura-bg&quot;&gt; &lt;i class=&quot;iconfont icon-sakura&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;gribs-bg&quot;&gt; &lt;i class=&quot;fa fa-slack&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;KAdots-bg&quot;&gt; &lt;i class=&quot;iconfont icon-dots&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;totem-bg&quot;&gt; &lt;i class=&quot;fa fa-optin-monster&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;pixiv-bg&quot;&gt; &lt;i class=&quot;iconfont icon-pixiv&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;bing-bg&quot;&gt; &lt;i class=&quot;iconfont icon-bing&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;dark-bg&quot;&gt; &lt;i class=&quot;fa fa-moon-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;canvas id=&quot;night-mode-cover&quot;&gt;&lt;/canvas&gt; 随后你就可以在右下角得到前端切换背景的控制面板： 背景图片可以在themes/Sakura/source/js/sakura-app.js中更换，其位置为 changeBG(&#39;#sakura-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/sakura.png&#39;) changeBG(&#39;#gribs-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/plaid.jpg&#39;) changeBG(&#39;#pixiv-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/star.png&#39;) changeBG(&#39;#KAdots-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/point.png&#39;) changeBG(&#39;#totem-bg&#39;, &#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/themebg/little-monster.png&#39;) changeBGnoTrans(&#39;#bing-bg&#39;, &#39;https://api.shino.cc/bing/&#39;) $(&#39;.skin-menu #white-bg&#39;).click(function () { mashiro_global.variables.skinSecter = false mashiro_global.variables.isNight = false $(&#39;#night-mode-cover&#39;).css(&#39;visibility&#39;, &#39;hidden&#39;) $(&#39;body&#39;).css(&#39;background-image&#39;, &#39;none&#39;) $(&#39;.blank&#39;).css(&#39;background-color&#39;, &#39;rgba(255,255,255,.0)&#39;) $(&#39;.pattern-center-sakura&#39;).removeClass(&#39;pattern-center-sakura&#39;).addClass(&#39;pattern-center&#39;) $(&#39;.headertop-bar-sakura&#39;).removeClass(&#39;headertop-bar-sakura&#39;).addClass(&#39;headertop-bar&#39;) $(&#39;#banner_wave_1&#39;).removeClass(&#39;banner_wave_hide_fit_skin&#39;) $(&#39;#banner_wave_2&#39;).removeClass(&#39;banner_wave_hide_fit_skin&#39;) closeSkinMenu() setCookie(&#39;bgImgSetting&#39;, &#39;&#39;, 30) }) $(&#39;.skin-menu #dark-bg&#39;).click(function () { mashiro_global.variables.skinSecter = true mashiro_global.variables.isNight = true $(&#39;body&#39;).css(&#39;background-image&#39;, &#39;url(https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/other/starry_sky.png)&#39;) $(&#39;.blank&#39;).css(&#39;background-color&#39;, &#39;rgba(255,255,255,.8)&#39;) $(&#39;#night-mode-cover&#39;).css(&#39;visibility&#39;, &#39;visible&#39;) $(&#39;.pattern-center&#39;).removeClass(&#39;pattern-center&#39;).addClass(&#39;pattern-center-sakura&#39;) $(&#39;.headertop-bar&#39;).removeClass(&#39;headertop-bar&#39;).addClass(&#39;headertop-bar-sakura&#39;) $(&#39;#banner_wave_1&#39;).addClass(&#39;banner_wave_hide_fit_skin&#39;) 替换其中所有图片的url即可完成更换。 如果还是没有的话，可在sakura-app.js里的scrollBar函数中，依据滚动的距离，添加 // 使该按键出现， $(&#39;.changeSkin-gear&#39;).css(&#39;visibility&#39;, &#39;visible&#39;).css( &#39;bottom&#39;, &#39;0px&#39;) // 使该按键隐藏 $(&#39;.changeSkin-gear&#39;).css({&#39;visibility&#39;:&#39;hidden&#39;}) Sakura主题配置latex公式需要首先参考文档关掉设置中的pjax，在主题/_congfig.yaml下，接着参考如下配置 如何在 hexo 中支持 Mathjax？ 具体过程为 在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。 第一步： 使用Kramed代替 Markedhexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。 kramed 是在 marked 的基础上进行修改。我们在工程目录下执行以下命令来安装 kramed. npm uninstall hexo-renderer-marked --save npm install hexo-renderer-kramed --save 然后，更改/node_modules/hexo-renderer-kramed/lib/renderer.js，更改： // Change inline math rule function formatText(text) { // Fit kramed&#39;s rule: $$ + \\1 + $$ return text.replace(/`\\$(.*?)\\$`/g, &#39;$$$$$1$$$$&#39;); } 为： // Change inline math rule function formatText(text) { return text; } 第二步: 停止使用 hexo-math首先，如果你已经安装 hexo-math, 请卸载它： npm uninstall hexo-math --save 然后安装 hexo-renderer-mathjax 包： npm install hexo-renderer-mathjax --save 第三步: 更新 Mathjax 的 CDN 链接首先，打开/node_modules/hexo-renderer-mathjax/mathjax.html 然后，把&lt;script&gt;更改为： &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt; 第四步: 更改默认转义规则因为 hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 &lt;em&gt;, 所以我们需要对默认的规则进行修改.首先， 打开&lt;path-to-your-project/node_modules/kramed/lib/rules/inline.js, 注：也就是博客根目录/node_modules/kramed/lib/rules/inline.js, 然后，把: 注：在11行左右 escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_&gt;])/, 更改为: escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/, 把 注：在20行左右 em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 更改为: em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 第五步: 开启mathjax在主题 _config.yml 中开启 Mathjax， 找到 mathjax 字段添加如下代码： 注：在根目录/themes/Sakura/_config.yml 中开启 Mathjax， 找到 mathjax 字段添加或修改如下代码，笔者这里是修改，是好用的： mathjax: enable: true 这一步可选，在博客中开启 Mathjax，， 添加以下内容： 注：这一步没找到在哪，不做也可以 --- title: Testing Mathjax with Hexo category: Uncategorized date: 2017/05/03 mathjax: true --- 通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式。 添加分类雷达、分类云、标签词云、标签云、仿Github日历、文章分类统计等组件在看到了Uncle_drew (cndrew.cn)的博客之后，觉得里面的分类雷达、分类云，标签词云，标签云的样式非常棒，就添加在了自己的博客中。这些其实是来自于hexo-theme-matery的组件，分别是目录 hexo-theme-matery/layout/_widget/下的: （分类雷达）category-radar.ejs （分类云）category-cloud.ejs （标签词云）tag-wordcloud.ejs （标签云）tag-cloud.ejs （文章分类统计） post-charts.ejs 此外，Uncle_drew (cndrew.cn)的文章中还提到了仿Github的文章发布日历图，但在Uncle_drew (cndrew.cn)的网站中好像已经弃用了，在本站中该组件放到了归档页上。该组件也来自于hexo-theme-matery （仿github发布日历）post-calendar.ejs 添加方法可以参考下述的链接。简单说就是将组件下载下来后，在指定页面插入该组件即可，需要注意的是仅仅下载ejs组件往往是不够的，需要补充基础的js、css文件，并且在各个组件中修改原有导入的js、css路径。最后依据不同博客的情况调整，美化页面，避免与博客原有内容冲突。 例如： &lt;%- partial(&#39;_widget/post-charts&#39;) %&gt; 可能的js文件有： jquery-3.3.1.min.js jqcloud-1.0.4.min.js echarts.min.js 可能的css文件有： jqcloud.css matery.css 本部分的ejs文件可以在matery中下载。 参考的链接：需要注意的是，笔者写文时Uncle_derw有关页面中提到的文件有许多是无法下载的，因此需要到matery或其他位置下载 花里胡哨的Hexo | 给你的hexo博客加上文章分析 | Uncle_drew (cndrew.cn) 花里胡哨的Hexo | 给你的hexo博客加上仿GIthub文章日历以及分类雷达图 | Uncle_drew (cndrew.cn) hexo文章标签统计实现 添加说说参考： Hexo添加可实时发布的说说界面 | Artitalk.js | Uncle_drew (cndrew.cn) Hexo添加可实时发布的说说界面 | Artitalk.js | Uncle_drew (cndrew.cn) 为你的hexo博客添加动态的（可直接发布说说的）说说页面 | Uncle_drew (cndrew.cn) 添加评论系统本博客使用twikoo评论系统，采用Vercel部署。 参考： Twikoo 文档 添加随机文章的插件参考： 现已更新自动实现随机文章（插件）| Hexo实现随机文章 （暴力实现） | Uncle_drew (cndrew.cn) hexo-generator-random | Hexo插件 | Uncle_drew (cndrew.cn) GitHub - Drew233/hexo-generator-random 添加久远文章的提示参考： Javascript实现Hexo中给时间久远的文章增加友好的提示 | Uncle_drew (cndrew.cn) 参考2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io) 参考博客样式：Uncle_drew (cndrew.cn) BOHC! (hewanyue.com) wallleap 樱花庄的白猫 | ねこ・しろ・ましろ 冬天的雨滴 Tianyu Cui’s Blog","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"},{"name":"博客美化","slug":"博客美化","permalink":"/tags/博客美化/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}